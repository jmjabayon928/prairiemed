# infra/docker/docker-compose.yml
services:
  postgres:
    image: postgres:16-alpine
    container_name: prairiemed-postgres
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-PrairieMed}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../db/postgres/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-PrairieMed}"]
      interval: 10s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: prairiemed-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  redpanda:
    image: redpandadata/redpanda:v24.1.8
    container_name: prairiemed-redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 1G
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      - --advertise-kafka-addr
      - PLAINTEXT://localhost:9092,INTERNAL://redpanda:29092
      - --rpc-addr
      - 0.0.0.0:33145
      - --advertise-rpc-addr
      - redpanda:33145
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "9644:9644"
    restart: unless-stopped

  mailpit:
    image: axllent/mailpit:latest
    container_name: prairiemed-mailpit
    ports:
      - "${SMTP_PORT:-1025}:1025"
      - "${MAILPIT_UI_PORT:-8025}:8025"
    restart: unless-stopped
    # Healthcheck via HTTP 200
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8025/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  mongodb:
    image: mongo:7.0
    container_name: prairiemed-mongodb
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodata:/data/db
      - ../mongo/init-indexes.js:/docker-entrypoint-initdb.d/init-indexes.js:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

  billing-service:
    container_name: prairiemed-billing
    build:
      context: ../../services/billing
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: "8081"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-PrairieMed}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: redpanda:29092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
    ports:
      - "${BILLING_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_started
    restart: unless-stopped

  invoice-worker:
    container_name: prairiemed-invoice-worker
    build:
      context: ../../workers
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKERS: redpanda:29092
      SMTP_HOST: mailpit
      SMTP_PORT: 1025
    depends_on:
      redpanda:
        condition: service_started
      mailpit:
        condition: service_started
    restart: unless-stopped

  audit-logger:
    container_name: prairiemed-audit-logger
    build:
      context: ../../workers/audit-logger
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKERS: redpanda:29092
      MONGODB_URI: mongodb://mongodb:27017
      MONGODB_DB: prairiemed
      MONGODB_COLLECTION: audit_logs
    depends_on:
      redpanda:
        condition: service_started
      mongodb:
        condition: service_healthy
    command: ["node", "index.js"]
    restart: unless-stopped

volumes:
  pgdata:
  mongodata:

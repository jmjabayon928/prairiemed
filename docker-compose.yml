# docker-compose.yml (Compose v2)
# All secrets & env-specific values are loaded from .env
# Do NOT commit your .env — commit .env.example instead.

services:
  postgres:
    image: postgres:16-alpine
    container_name: prairiemed-postgres
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT_HOST:-5433}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: prairiemed-redis
    ports:
      - "${REDIS_PORT_HOST:-6379}:6379"
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  redpanda:
    image: redpandadata/redpanda:v24.1.8
    container_name: prairiemed-redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 1G
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      - --advertise-kafka-addr
      - PLAINTEXT://localhost:9092,INTERNAL://redpanda:29092
      - --rpc-addr
      - 0.0.0.0:33145
      - --advertise-rpc-addr
      - redpanda:33145
    ports:
      - "${KAFKA_PORT_HOST:-9092}:9092"
      - "${REDPANDA_ADMIN_PORT_HOST:-9644}:9644"
    restart: unless-stopped

  mailpit:
    image: axllent/mailpit:latest
    container_name: prairiemed-mailpit
    ports:
      - "${SMTP_PORT_HOST:-1025}:1025"
      - "${MAILPIT_UI_PORT_HOST:-8025}:8025"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "command -v curl >/dev/null 2>&1 && curl -fsS http://127.0.0.1:8025/ || (command -v wget >/dev/null 2>&1 && wget -qO- http://127.0.0.1:8025/) || (command -v nc >/dev/null 2>&1 && nc -z 127.0.0.1 8025)"
        ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s

  mongodb:
    image: mongo:7.0
    container_name: prairiemed-mongodb
    env_file:
      - ./.env
    ports:
      - "${MONGODB_PORT_HOST:-27017}:27017"
    volumes:
      - mongodata:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

  billing-service:
    container_name: prairiemed-billing
    build:
      context: ./services/billing
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      SERVER_PORT: "8081"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: redpanda:29092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
    ports:
      - "${BILLING_PORT_HOST:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_started
    restart: unless-stopped

  invoice-worker:
    container_name: prairiemed-invoice-worker
    build:
      context: ./workers
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      KAFKA_BROKERS: ${KAFKA_BROKERS:-redpanda:29092}
      SMTP_HOST: mailpit
      SMTP_PORT: "1025"
    depends_on:
      redpanda:
        condition: service_started
      mailpit:
        condition: service_started
    restart: unless-stopped

  audit-logger:
    container_name: prairiemed-audit-logger
    build:
      context: ./workers/audit-logger
    env_file:
      - ./.env
    environment:
      KAFKA_BROKERS: ${KAFKA_BROKERS:-redpanda:29092}
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017}
      MONGODB_DB: ${MONGODB_DB:-prairiemed}
      MONGODB_COLLECTION: ${MONGODB_COLLECTION:-audit_logs}
    depends_on:
      redpanda:
        condition: service_started
      mongodb:
        condition: service_healthy
    command: ["node", "index.js"]
    restart: unless-stopped

  # ───────────────────────────────
  # Express API (dev container)
  # ───────────────────────────────
  api:
    image: node:20-alpine
    container_name: prairiemed-api
    working_dir: /app
    volumes:
      - ./:/app
      - api-node_modules:/app/node_modules
      - pnpm-store:/root/.pnpm-store
    env_file:
      - ./.env
    environment:
      NODE_ENV: development
      CI: "true"                 # avoid pnpm interactive prompts
      PORT: "4000"
      CORS_ORIGIN: http://localhost:3000
      KAFKA_BROKERS: redpanda:29092
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_started
    ports:
      - "4000:4000"
    command: >
      sh -lc "corepack enable &&
              pnpm install --frozen-lockfile &&
              pnpm run dev:api"
    restart: unless-stopped

  # ───────────────────────────────
  # Next.js web (dev container)
  # ───────────────────────────────
  web:
    image: node:20-alpine
    container_name: prairiemed-web
    working_dir: /app
    volumes:
      - ./:/app
      - web-node_modules:/app/node_modules
      - pnpm-store:/root/.pnpm-store
    environment:
      NODE_ENV: development
      CI: "true"                 # avoid pnpm interactive prompts
      API_PROXY_TARGET: http://api:4000   # used by next.config.ts rewrites()
      NEXT_TELEMETRY_DISABLED: "1"
    depends_on:
      api:
        condition: service_started
    ports:
      - "3000:3000"
    command: >
      sh -lc "corepack enable &&
              pnpm install --frozen-lockfile &&
              pnpm run dev:web"
    restart: unless-stopped

volumes:
  pgdata:
  mongodata:
  api-node_modules:
  web-node_modules:
  pnpm-store:
